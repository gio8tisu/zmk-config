/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        homerow_mod: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        layer_sticky_or_to: layer_sticky_or_to {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_OR_TO";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&tog>, <&sl>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                  &kp Q  &kp W                    &kp E                    &kp R                 &kp T        &kp Y      &kp U                 &kp I                     &kp O                     &kp P          &kp DELETE
&mt ESCAPE CAPSLOCK      &kp A  &homerow_mod LEFT_ALT S  &homerow_mod LEFT_GUI D  &homerow_mod LCTRL F  &kp G        &kp H      &homerow_mod RCTRL J  &homerow_mod RIGHT_GUI K  &homerow_mod RIGHT_ALT L  &kp SEMICOLON  &kp SQT
&layer_sticky_or_to 3 3  &kp Z  &kp X                    &kp C                    &kp V                 &kp B        &kp N      &kp M                 &kp COMMA                 &kp DOT                   &kp FSLH       &kp MINUS
                                                         &kp LEFT_SHIFT           &mo 1                 &kp SPACE    &kp ENTER  &mo 2                 &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6      &kp N7      &kp N8      &kp N9        &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &bt BT_SEL 0  &trans  &trans
                        &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &trans  &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK  &kp CARET
&trans  &trans    &trans  &trans    &trans    &trans       &trans  &kp EQUAL  &kp LBKT              &kp RBKT               &kp BSLH      &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans       &trans  &kp PLUS   &kp LBRC              &kp RBRC               &kp PIPE      &kp TILDE
                          &trans    &trans    &trans       &trans  &trans     &trans
            >;
        };

        numpad {
            bindings = <
&kp C_PLAY_PAUSE   &kp C_MUTE       &kp F7  &kp F8  &kp F9  &trans    &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE    &kp KP_MULTIPLY
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp F4  &kp F5  &kp F6  &trans    &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_SUBTRACT  &kp KP_PLUS
&to 0              &trans           &kp F1  &kp F2  &kp F3  &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &kp KP_EQUAL
                                            &trans  &trans  &trans    &trans           &trans           &trans
            >;
        };
    };
};
